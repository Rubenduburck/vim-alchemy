name: Release

on:
  push:
    branches: [main]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  CFLAGS: -std=gnu17
  CXXFLAGS: -std=gnu++17

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      current_version: ${{ steps.version.outputs.current }}
      previous_version: ${{ steps.version.outputs.previous }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if version changed
      id: version
      run: |
        # Get current version from Cargo.toml
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if tag already exists
        if git tag -l "v$CURRENT_VERSION" | grep -q "v$CURRENT_VERSION"; then
          echo "Tag v$CURRENT_VERSION already exists"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected: v$CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: alchemy-x86_64-linux
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: alchemy-aarch64-linux
          
          # macOS
          - target: x86_64-apple-darwin
            os: macos-13  # Use Intel runner for x86_64
            name: alchemy-x86_64-macos
          - target: aarch64-apple-darwin
            os: macos-latest  # Use Apple Silicon runner for aarch64
            name: alchemy-aarch64-macos

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgmp-dev libmpfr-dev libmpc-dev
    
    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gmp mpfr
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        sudo apt-get install -y libc6-dev-arm64-cross
        # Install m4 which is required for GMP compilation
        sudo apt-get install -y m4
    
    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        # Set environment variables for cross-compilation
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "CFLAGS_aarch64_unknown_linux_gnu=-std=gnu17" >> $GITHUB_ENV
        echo "CXXFLAGS_aarch64_unknown_linux_gnu=-std=gnu++17" >> $GITHUB_ENV
        # Also set the generic CC/AR for configure scripts
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "HOST=aarch64-unknown-linux-gnu" >> $GITHUB_ENV
    
    - name: Build
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # For macOS, ensure we're not cross-compiling
          CURRENT_ARCH=$(uname -m)
          TARGET_ARCH="${{ matrix.target }}"
          if [[ "$CURRENT_ARCH" == "x86_64" && "$TARGET_ARCH" == "x86_64-apple-darwin" ]] || 
             [[ "$CURRENT_ARCH" == "arm64" && "$TARGET_ARCH" == "aarch64-apple-darwin" ]]; then
            echo "Building native binary for $TARGET_ARCH"
            cargo build --release --target ${{ matrix.target }}
          else
            echo "Error: Cross-compilation on macOS not supported"
            exit 1
          fi
        else
          # For other platforms, build normally
          cargo build --release --target ${{ matrix.target }}
        fi
    
    - name: Prepare artifact
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        cp alchemy ../../${{ matrix.name }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: target/${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: needs.check-version.outputs.version_changed == 'true'
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the last tag (if any)
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          # Generate changelog since last tag
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
        else
          # First release, get recent commits
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
        fi
        
        # Save changelog to file for use in release body
        echo "$CHANGELOG" > CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.current_version }}
        name: Release v${{ needs.check-version.outputs.current_version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: artifacts/*/alchemy*
        body: |
          ## Alchemy v${{ needs.check-version.outputs.current_version }}
          
          ### Changes
          $(cat CHANGELOG.md)
          
          ### Downloads
          Choose the binary for your platform:
          - **Linux x64**: `alchemy-x86_64-linux`
          - **Linux ARM64**: `alchemy-aarch64-linux`
          - **macOS Intel**: `alchemy-x86_64-macos`
          - **macOS Apple Silicon**: `alchemy-aarch64-macos`
          
          **Note**: Windows is not supported due to the `rug` dependency requiring GMP/MPFR libraries.
          
          ### Installation
          1. Download the appropriate binary for your platform
          2. Rename it to `alchemy` (remove architecture suffix)
          3. Make it executable: `chmod +x alchemy`
          4. Move to a directory in your PATH: `mv alchemy ~/.local/bin/`
          
          Or use the Neovim plugin with `build = "make install"` to automatically download the correct binary.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}