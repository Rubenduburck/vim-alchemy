use regex::Regex;
use std::env;
use std::fs::File;
use std::io::Write;
use std::path::Path;

// Define all our regex patterns
const PATTERNS: &[(&str, &str, bool)] = &[
    // (name, pattern, case_insensitive)
    ("MATCH_BASE2", r"(0b)?[01]+", true),
    ("MATCH_BASE16", r"(0x)?[0-9a-f]+", true),
    ("MATCH_BASE10", r"[0-9]+", false),
    ("MATCH_BASE58", r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$", false),
    ("MATCH_BASE64", r"[A-Za-z0-9+/]+={0,2}", false),
    ("MATCH_ARRAY", r"(.+)([\s*,]\s*.+)", false),
    ("EXTRACT_BASE2", r"[01]+", true),
    ("EXTRACT_BASE16", r"[0-9a-f]+", true),
    ("EXTRACT_BASE10", r"[0-9]+", false),
    ("EXTRACT_BASE58", r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$", false),
    ("EXTRACT_BASE64", r"[A-Za-z0-9+/]+", false),
    ("EXTRACT_BRACKETS", r"[<\[\(\{\}\)\]>]", false),
    ("EXTRACT_SEPARATORS", r"[\s,]\s*", false),
    ("EXTRACT_ARRAY", r"(.+?)(?:[\s,]+|$)", false),
];

fn main() {
    println!("cargo:rerun-if-changed=build.rs");
    
    // Validate all regex patterns at build time
    for (name, pattern, case_insensitive) in PATTERNS {
        let test_regex = if *case_insensitive {
            regex::RegexBuilder::new(pattern)
                .case_insensitive(true)
                .build()
        } else {
            Regex::new(pattern)
        };
        
        match test_regex {
            Ok(_) => println!("cargo:warning=Validated regex {}: {}", name, pattern),
            Err(e) => panic!("Invalid regex {} ({}): {}", name, pattern, e),
        }
    }
    
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("compiled_regexes.rs");
    let mut file = File::create(&dest_path).unwrap();
    
    // Write the header
    writeln!(file, "// This file is automatically generated by build.rs").unwrap();
    writeln!(file, "// Do not edit manually!\n").unwrap();
    writeln!(file, "use regex::{{Regex, RegexBuilder}};").unwrap();
    writeln!(file, "use std::sync::OnceLock;\n").unwrap();
    
    // Generate the pattern constants and static regexes
    for (name, pattern, case_insensitive) in PATTERNS {
        // Write pattern constant
        writeln!(file, "const {}_PATTERN: &str = r#\"{}\"#;", name, pattern).unwrap();
        
        // Write static regex with OnceLock
        writeln!(file, "static {}: OnceLock<Regex> = OnceLock::new();", name).unwrap();
        writeln!(file, "pub fn get_{}() -> &'static Regex {{", name.to_lowercase()).unwrap();
        writeln!(file, "    {}.get_or_init(|| {{", name).unwrap();
        
        if *case_insensitive {
            writeln!(file, "        RegexBuilder::new({}_PATTERN)", name).unwrap();
            writeln!(file, "            .case_insensitive(true)").unwrap();
            writeln!(file, "            .build()").unwrap();
            writeln!(file, "            .expect(\"Pre-validated regex should compile\")").unwrap();
        } else {
            writeln!(file, "        Regex::new({}_PATTERN)", name).unwrap();
            writeln!(file, "            .expect(\"Pre-validated regex should compile\")").unwrap();
        }
        
        writeln!(file, "    }})").unwrap();
        writeln!(file, "}}\n").unwrap();
    }
    
    println!("cargo:warning=Generated {} pre-validated regexes", PATTERNS.len());
}